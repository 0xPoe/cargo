

[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Button)>`)
[1;34m  -->[0m src/controls.rs:245:17-245:78

try
[0]: [1;33mReplace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Button)>>(data)[0m(&button)

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Button)>)

[1;32m==>[0m [32mWhat do you want to do? [0-9] | [r]eplace | [s]kip | save and [q]uit | [a]bort (without saving)[0m
[1;32m  >[0m Suggestion accepted. I'll remember that and apply it later.


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Entry)>`)
[1;34m  -->[0m src/controls.rs:350:17-350:77

try
[0]: [1;33mReplace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Entry)>>(data)[0m(&entry);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Entry)>)

[1;32m==>[0m [32mWhat do you want to do? [0-9] | [r]eplace | [s]kip | save and [q]uit | [a]bort (without saving)[0m
[1;32m  >[0m Skipped.


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::Entry`
[1;34m  -->[0m src/controls.rs:373:5-378:6

try this
[0]: [1;33mAt:[0m
[31m⍉[0mpub fn new() -> Entry {
[31m^[0m

[1;33minsert:[0m

    impl Default for controls::Entry {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

[1;32m==>[0m [32mWhat do you want to do? [0-9] | [r]eplace | [s]kip | save and [q]uit | [a]bort (without saving)[0m
[1;32m  >[0m Thanks for playing!
Good work. Let me just apply these 1 changes!
.
Done.
