

[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Button)>`)
[1;34m  -->[0m src/controls.rs:245:17-245:78
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Button)>>(data)[0m(&button)

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Button)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Entry)>`)
[1;34m  -->[0m src/controls.rs:350:17-350:77
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Entry)>>(data)[0m(&entry);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Entry)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::Entry`
[1;34m  -->[0m src/controls.rs:373:5-373:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> Entry {

[1;33mwith:[0m

    impl Default for controls::Entry {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Checkbox)>`)
[1;34m  -->[0m src/controls.rs:415:17-415:80
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Checkbox)>>(data)[0m(&checkbox);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Checkbox)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::Tab`
[1;34m  -->[0m src/controls.rs:526:5-526:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> Tab {

[1;33mwith:[0m

    impl Default for controls::Tab {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Spinbox)>`)
[1;34m  -->[0m src/controls.rs:621:17-621:79
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Spinbox)>>(data)[0m(&spinbox);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Spinbox)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::ProgressBar`
[1;34m  -->[0m src/controls.rs:648:5-648:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> ProgressBar {

[1;33mwith:[0m

    impl Default for controls::ProgressBar {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Slider)>`)
[1;34m  -->[0m src/controls.rs:689:17-689:78
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Slider)>>(data)[0m(&slider);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Slider)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::Combobox)>`)
[1;34m  -->[0m src/controls.rs:758:17-758:80
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&Combobox)>>(data)[0m(&combobox);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&Combobox)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::Combobox`
[1;34m  -->[0m src/controls.rs:765:5-765:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> Combobox {

[1;33mwith:[0m

    impl Default for controls::Combobox {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::RadioButtons`
[1;34m  -->[0m src/controls.rs:796:5-796:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> RadioButtons {

[1;33mwith:[0m

    impl Default for controls::RadioButtons {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::MultilineEntry)>`)
[1;34m  -->[0m src/controls.rs:866:17-867:73
[1;33mSuggestion - Replace:[0m

                   [31mmem::transmute::<*mut c_void,
                                &mut Box<FnMut(&MultilineEntry)>>(data)[0m(&multiline_entry);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&MultilineEntry)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::MultilineEntry`
[1;34m  -->[0m src/controls.rs:890:5-890:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> MultilineEntry {

[1;33mwith:[0m

    impl Default for controls::MultilineEntry {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::FontButton)>`)
[1;34m  -->[0m src/controls.rs:1182:17-1182:82
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&FontButton)>>(data)[0m(&font_button);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&FontButton)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::FontButton`
[1;34m  -->[0m src/controls.rs:1189:5-1189:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> FontButton {

[1;33mwith:[0m

    impl Default for controls::FontButton {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r> std::ops::FnMut(&'r controls::ColorButton)>`)
[1;34m  -->[0m src/controls.rs:1237:17-1237:83
[1;33mSuggestion - Replace:[0m

[31mmem::transmute::<*mut c_void, &mut Box<FnMut(&ColorButton)>>(data)[0m(&color_button);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&ColorButton)>)

automatically applying suggestion (--yolo)


[1;32mInfo[0m: you should consider adding a `Default` implementation for `controls::ColorButton`
[1;34m  -->[0m src/controls.rs:1244:5-1244:5
[1;33mSuggestion - Replace:[0m

[31m[0mpub fn new() -> ColorButton {

[1;33mwith:[0m

    impl Default for controls::ColorButton {
            fn default() -> Self {
                Self::new()
            }
        }
    
        

automatically applying suggestion (--yolo)


[1;32mInfo[0m: transmute from a pointer type (`*mut libc::c_void`) to a reference type (`&mut std::boxed::Box<for<'r, 'r> std::ops::FnMut(&'r menus::MenuItem, &'r windows::Window)>`)
[1;34m  -->[0m src/menus.rs:50:17-51:76
[1;33mSuggestion - Replace:[0m

                   [31mmem::transmute::<*mut c_void,
                                &mut Box<FnMut(&MenuItem, &Window)>>(data)[0m(&menu_item, &window);

[1;33mwith:[0m

    &mut *(data as *mut Box<FnMut(&MenuItem, &Window)>)

automatically applying suggestion (--yolo)
Good work. Let me just apply these 18 changes!
..................
Done.
