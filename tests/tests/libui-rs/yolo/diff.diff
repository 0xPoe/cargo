diff --git a/ui/src/controls.rs b/ui/src/controls.rs
index 5699276..e54973c 100644
--- a/ui/src/controls.rs
+++ b/ui/src/controls.rs
@@ -242,7 +242,7 @@ impl Button {
                 let button = Button {
                     ui_button: button,
                 };
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&Button)>>(data)(&button)
+                &mut *(data as *mut Box<FnMut(&Button)>)(&button)
             }
         }
     }
@@ -347,7 +347,7 @@ impl Entry {
         extern "C" fn c_callback(entry: *mut uiEntry, data: *mut c_void) {
             unsafe {
                 let entry = Entry::from_ui_control(entry);
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&Entry)>>(data)(&entry);
+                &mut *(data as *mut Box<FnMut(&Entry)>)(&entry);
                 mem::forget(entry);
             }
         }
@@ -370,6 +370,12 @@ impl Entry {
     }
 
     #[inline]
+    impl Default for controls::Entry {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> Entry {
         ffi_utils::ensure_initialized();
         unsafe {
@@ -412,7 +418,7 @@ impl Checkbox {
         extern "C" fn c_callback(checkbox: *mut uiCheckbox, data: *mut c_void) {
             unsafe {
                 let checkbox = Checkbox::from_ui_control(checkbox);
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&Checkbox)>>(data)(&checkbox);
+                &mut *(data as *mut Box<FnMut(&Checkbox)>)(&checkbox);
                 mem::forget(checkbox)
             }
         }
@@ -523,6 +529,12 @@ impl Tab {
     }
 
     #[inline]
+    impl Default for controls::Tab {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> Tab {
         ffi_utils::ensure_initialized();
         unsafe {
@@ -618,7 +630,7 @@ impl Spinbox {
         extern "C" fn c_callback(spinbox: *mut uiSpinbox, data: *mut c_void) {
             unsafe {
                 let spinbox = Spinbox::from_ui_control(spinbox);
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&Spinbox)>>(data)(&spinbox);
+                &mut *(data as *mut Box<FnMut(&Spinbox)>)(&spinbox);
                 mem::forget(spinbox);
             }
         }
@@ -645,6 +657,12 @@ impl ProgressBar {
     }
 
     #[inline]
+    impl Default for controls::ProgressBar {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> ProgressBar {
         ffi_utils::ensure_initialized();
         unsafe {
@@ -686,7 +704,7 @@ impl Slider {
         extern "C" fn c_callback(slider: *mut uiSlider, data: *mut c_void) {
             unsafe {
                 let slider = Slider::from_ui_control(slider);
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&Slider)>>(data)(&slider);
+                &mut *(data as *mut Box<FnMut(&Slider)>)(&slider);
                 mem::forget(slider);
             }
         }
@@ -755,13 +773,19 @@ impl Combobox {
         extern "C" fn c_callback(combobox: *mut uiCombobox, data: *mut c_void) {
             unsafe {
                 let combobox = Combobox::from_ui_control(combobox);
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&Combobox)>>(data)(&combobox);
+                &mut *(data as *mut Box<FnMut(&Combobox)>)(&combobox);
                 mem::forget(combobox);
             }
         }
     }
 
     #[inline]
+    impl Default for controls::Combobox {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> Combobox {
         ffi_utils::ensure_initialized();
         unsafe {
@@ -793,6 +817,12 @@ impl RadioButtons {
     }
 
     #[inline]
+    impl Default for controls::RadioButtons {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> RadioButtons {
         ffi_utils::ensure_initialized();
         unsafe {
@@ -863,8 +893,7 @@ impl MultilineEntry {
         extern "C" fn c_callback(multiline_entry: *mut uiMultilineEntry, data: *mut c_void) {
             unsafe {
                 let multiline_entry = MultilineEntry::from_ui_control(multiline_entry);
-                mem::transmute::<*mut c_void,
-                                 &mut Box<FnMut(&MultilineEntry)>>(data)(&multiline_entry);
+                &mut *(data as *mut Box<FnMut(&MultilineEntry)>)(&multiline_entry);
                 mem::forget(multiline_entry);
             }
         }
@@ -887,6 +916,12 @@ impl MultilineEntry {
     }
 
     #[inline]
+    impl Default for controls::MultilineEntry {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> MultilineEntry {
         ffi_utils::ensure_initialized();
         unsafe {
@@ -1179,13 +1214,19 @@ impl FontButton {
         extern "C" fn c_callback(ui_font_button: *mut uiFontButton, data: *mut c_void) {
             unsafe {
                 let font_button = FontButton::from_ui_control(ui_font_button);
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&FontButton)>>(data)(&font_button);
+                &mut *(data as *mut Box<FnMut(&FontButton)>)(&font_button);
                 mem::forget(font_button);
             }
         }
     }
 
     #[inline]
+    impl Default for controls::FontButton {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> FontButton {
         ffi_utils::ensure_initialized();
         unsafe {
@@ -1234,13 +1275,19 @@ impl ColorButton {
         extern "C" fn c_callback(ui_color_button: *mut uiColorButton, data: *mut c_void) {
             unsafe {
                 let color_button = ColorButton::from_ui_control(ui_color_button);
-                mem::transmute::<*mut c_void, &mut Box<FnMut(&ColorButton)>>(data)(&color_button);
+                &mut *(data as *mut Box<FnMut(&ColorButton)>)(&color_button);
                 mem::forget(color_button)
             }
         }
     }
 
     #[inline]
+    impl Default for controls::ColorButton {
+        fn default() -> Self {
+            Self::new()
+        }
+    }
+
     pub fn new() -> ColorButton {
         ffi_utils::ensure_initialized();
         unsafe {
diff --git a/ui/src/menus.rs b/ui/src/menus.rs
index 1255b69..9847ddc 100644
--- a/ui/src/menus.rs
+++ b/ui/src/menus.rs
@@ -47,8 +47,7 @@ impl MenuItem {
                     ui_menu_item: menu_item,
                 };
                 let window = Window::from_ui_window(window);
-                mem::transmute::<*mut c_void,
-                                 &mut Box<FnMut(&MenuItem, &Window)>>(data)(&menu_item, &window);
+                &mut *(data as *mut Box<FnMut(&MenuItem, &Window)>)(&menu_item, &window);
                 mem::forget(window);
             }
         }
